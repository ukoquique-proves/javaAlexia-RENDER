package com.alexia.service;

import com.alexia.entity.Business;
import com.alexia.repository.BusinessRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

/**
 * Servicio para funcionalidades de geolocalizaci√≥n.
 * Incluye b√∫squeda de negocios cercanos y categor√≠as relacionadas.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class GeolocationService {
    
    private final BusinessRepository businessRepository;
    
    // Categor√≠as de negocios que necesitan productos pl√°sticos
    private static final String[] PLASTIC_PRODUCT_CONSUMERS = {
        "restaurant", "restaurante", "cafeteria", "caf√©", "bar", "pub", 
        "catering", "banquete", "evento", "eventos", "catering service",
        "hotel", "hostal", "motel", "lodging", "alojamiento",
        "school", "escuela", "colegio", "universidad", "educaci√≥n",
        "hospital", "hospitality", "salud", "cl√≠nica", "healthcare",
        "party", "fiesta", "celebraci√≥n", "cumplea√±os", "boda",
        "office", "oficina", "corporativo", "business", "negocio",
        "store", "tienda", "retail", "venta al por menor"
    };
    
    /**
     * Busca negocios cercanos que necesiten productos pl√°sticos.
     * 
     * @param longitude Longitud del punto central
     * @param latitude Latitud del punto central
     * @param radiusMeters Radio de b√∫squeda en metros
     * @return Lista de negocios cercanos
     */
    public List<Business> findPlasticProductConsumersNearby(double longitude, double latitude, int radiusMeters) {
        log.info("Buscando consumidores de productos pl√°sticos cercanos - longitud={}, latitud={}, radio={}m", 
                longitude, latitude, radiusMeters);
        
        // Primero buscar por categor√≠as espec√≠ficas
        List<Business> businesses = businessRepository.findByCategoryNearby(
            String.join(",", PLASTIC_PRODUCT_CONSUMERS), longitude, latitude, radiusMeters);
        
        // Si no hay suficientes resultados, buscar por proximidad
        if (businesses.size() < 5) {
            log.info("No se encontraron suficientes negocios por categor√≠a, buscando por proximidad");
            businesses = businessRepository.findNearby(longitude, latitude, radiusMeters);
        }
        
        log.info("Se encontraron {} negocios cercanos", businesses.size());
        return businesses;
    }
    
    /**
     * Busca negocios cercanos por categor√≠a espec√≠fica.
     * 
     * @param category Categor√≠a a buscar
     * @param longitude Longitud del punto central
     * @param latitude Latitud del punto central
     * @param radiusMeters Radio de b√∫squeda en metros
     * @return Lista de negocios cercanos
     */
    public List<Business> findNearbyByCategory(String category, double longitude, double latitude, int radiusMeters) {
        log.info("Buscando negocios cercanos por categor√≠a - categor√≠a={}, longitud={}, latitud={}, radio={}m", 
                category, longitude, latitude, radiusMeters);
        
        List<Business> businesses = businessRepository.findByCategoryNearby(
            category, longitude, latitude, radiusMeters);
        
        log.info("Se encontraron {} negocios de la categor√≠a '{}' cercanos", businesses.size(), category);
        return businesses;
    }
    
    /**
     * Obtiene todas las categor√≠as de consumidores de productos pl√°sticos.
     * 
     * @return Array de categor√≠as
     */
    public String[] getPlasticProductConsumerCategories() {
        return PLASTIC_PRODUCT_CONSUMERS;
    }
    
    /**
     * Formatea la lista de negocios cercanos para mostrar en Telegram.
     * 
     * @param businesses Lista de negocios
     * @param category Categor√≠a buscada
     * @param radiusMeters Radio de b√∫squeda en metros
     * @return Mensaje formateado
     */
    public String formatNearbyBusinessesForTelegram(List<Business> businesses, String category, int radiusMeters) {
        if (businesses.isEmpty()) {
            return "‚ùå No encontr√© negocios cercanos que necesiten '" + category + "'.\n\n" +
                   "üí° Intenta ampliar el radio de b√∫squeda o usar otra categor√≠a.";
        }

        StringBuilder message = new StringBuilder();
        message.append("üéØ Encontr√© ").append(businesses.size())
               .append(" negocio(s) cercanos que pueden necesitar '").append(category).append("'\n\n");

        // Convertir metros a kil√≥metros si es mayor a 1000m
        String radiusText = radiusMeters >= 1000 ? 
            (radiusMeters / 1000) + "km" : 
            radiusMeters + "m";

        message.append("üìç Radio de b√∫squeda: ").append(radiusText).append("\n\n");

        for (int i = 0; i < Math.min(businesses.size(), 15); i++) { // Limitar a 15 resultados
            Business business = businesses.get(i);
            message.append(i + 1).append(". ")
                   .append("üè™ ").append(business.getName()).append("\n");

            // Extraer distancia del resultado (a√±adida por la consulta)
            try {
                // La distancia se a√±ade como propiedad adicional en la consulta
                // En una implementaci√≥n real, se usar√≠a un DTO o se calcular√≠a aqu√≠
                // Por ahora simulamos la distancia
                double simulatedDistance = calculateSimulatedDistance(business, i);
                String distanceText = simulatedDistance >= 1000 ? 
                    String.format("%.1fkm", simulatedDistance/1000) : 
                    String.format("%.0fm", simulatedDistance);
                
                message.append("   üìè ").append(distanceText).append("\n");
            } catch (Exception e) {
                // Si no se puede obtener la distancia, continuar sin ella
                log.debug("No se pudo obtener la distancia para el negocio: {}", business.getName());
            }

            if (business.getAddress() != null && !business.getAddress().isEmpty()) {
                message.append("   üìç ").append(business.getAddress()).append("\n");
            }

            if (business.getPhone() != null && !business.getPhone().isEmpty()) {
                message.append("   üìû ").append(business.getPhone()).append("\n");
            }

            if (business.getWhatsapp() != null && !business.getWhatsapp().isEmpty()) {
                message.append("   üí¨ WhatsApp: ").append(business.getWhatsapp()).append("\n");
            }

            // Informaci√≥n adicional √∫til
            if (business.getCategory() != null && !business.getCategory().isEmpty()) {
                message.append("   üè∑Ô∏è Categor√≠a: ").append(business.getCategory()).append("\n");
            }

            message.append("\n");
        }

        if (businesses.size() > 15) {
            message.append("... y ").append(businesses.size() - 15).append(" m√°s.\n");
        }

        message.append("üí° Consejo: Usa /contactar [n√∫mero] para enviar un mensaje de presentaci√≥n.");

        return message.toString();
    }
    
    /**
     * Simula el c√°lculo de distancia para demostraci√≥n.
     * En una implementaci√≥n real, esta informaci√≥n vendr√≠a de la base de datos.
     * 
     * @param business Negocio
     * @param index √çndice en la lista
     * @return Distancia simulada en metros
     */
    private double calculateSimulatedDistance(Business business, int index) {
        // Simulaci√≥n de distancia creciente para demostraci√≥n
        return 100 + (index * 75);
    }
}
